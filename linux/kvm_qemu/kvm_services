#!/bin/bash
# Function: Start and stop services required for running KVM/QEMU virtual machines
#           See kvm for caller
#
# Installation & Setup:
# - Copy the file into the directory /usr/local/sbin and make it executable
# - You can add it to sudo with NOPASSWD option, so you can execute the command without password
#   <YOUR-USERNAME>   ALL = NOPASSWD: /usr/local/sbin/kvm_services  # KVM Service Control
#
#  (c) 2021 Robert Lange (sd2k9@sethdepot.org)
#  GNU General Public Licence applies
#
#  Project URL: https://github.com/sd2k9/documentation
 
# ------------------------------------------------------------------------------

# *** Settings ***
# Treat uninitialised variable as error and exit script
set -u
# Test mode: True when defined (only echo commands)
readonly TESTMODE=

# Mode, set by command line
declare mode=

# ------------------------------------------------------------------------------

# Abort on tool error (errorcode <> 0)
function abort_on_error() {
    local err
    err=$1
    shift
    if [ $err -ne 0 ]; then
	   echo "Program execution failed with error code $err!"
	   exit 1
    fi
}

# Execute this tool
# Caution: Use "\"text with spaces\"" to escape spaces
function exec_tool() {
    echo "$@"
   if [[ -z "$TESTMODE" ]]; then
       eval "$@"
       abort_on_error $?
   fi
}

# Reconfigure firehol
function firehol_reconfig() {
    # Enforce rebuild of firewall
    exec_tool touch /etc/firehol/firehol.conf
    # Restart
    exec_tool /usr/sbin/firehol condrestart
    # Enfore rebuild of firewall the next time it is restarted
    exec_tool touch /etc/firehol/firehol.conf
}


# ------------------------------------------------------------------------------

# *** Command line parsing
get_options() {
  local opt

  while [ -n "$*" ] ; do
      opt="$1"
      shift
      case $opt in
        start|stop|localnet|internet|stopnet)
          mode="$opt"
        ;;
        *)
           # Unknown Argument
  	   echo "Unknown argument!"
   	   exit 1
  	   ;;
      esac
  done
}


# *** Call Command Line Parsing and Program execution
# When no options supplied then call help
if [ -z "${1:-}" ]; then
    echo "Missing arguments!"
    exit 1
else
    get_options "$@"
fi
# When no mode found, call help
if [[ -z "$mode" ]]; then
    echo "Missing operation mode!"
    exit 1
fi

# ------------------------------------------------------------------------------

# *** Now execute actions, or done above

case $mode in
  start|stop)
     echo "$mode services"
     exec_tool systemctl $mode \
        libvirt-guests.service \
        libvirtd.service \
        virt-guest-shutdown.target \
        virtlockd-admin.socket \
        virtlockd.service \
        virtlockd.socket \
        virtlogd-admin.socket \
        virtlogd.service \
        virtlogd.socket
  ;;
  localnet)
    echo "Firewall: Local access, no outwards network routing"
    # Define KVM-Mode for firehol, see its config file
    # No outwards network routing
    export FIREHOL_USER_FEATURES=kvm
    firehol_reconfig
  ;;
  internet)
    echo "Firewall: Allow network routing for internet access"
    # Define KVM-Mode for firehol, see its config file
    # WITH outwards network routing
    export FIREHOL_USER_FEATURES=kvm-net
    firehol_reconfig
  ;;
  stopnet)
      echo "Firewall: Remove network routing"
      firehol_reconfig
  ;;
  *)
      # No mode
      echo "No mode selected! See help text for usage"
      exit 1
  ;;
esac
